<configuration>
  <appSettings>
    <add key="EMS_CsvFolder" value="C:\Users\YourUser\Desktop\EMS_CsvFiles"/>
    <add key="EMS_ExcelFolder" value="C:\Users\YourUser\Desktop\EMS_ExcelFiles"/>
    <add key="EMS_SqlConnection" value="Server=.\SQLEXPRESS;Database=EmsDb;User Id=sa;Password=YourPassword;"/>
  </appSettings>
</configuration>







using System;
using System.Configuration;
using System.IO;
using ClosedXML.Excel;
using EmsConsole;

namespace EMSProcessor
{
    class Program
    {
        static void Main(string[] args)
        {
            try
            {
                // Config values
                string vCsvFolder = ConfigurationManager.AppSettings["EMS_CsvFolder"];
                string vExcelFolder = ConfigurationManager.AppSettings["EMS_ExcelFolder"];
                string vSqlConnection = ConfigurationManager.AppSettings["EMS_SqlConnection"];

                SqlData oSqlData = new SqlData(vSqlConnection);

                var vTodayDate = DateTime.Today;

                if (!Directory.Exists(vCsvFolder))
                {
                    Console.WriteLine($"EMS CSV folder not found: {vCsvFolder}");
                    return;
                }

                // Create EMS folder hierarchy: Year/Month/Date
                string vPathYear = Path.Combine(vExcelFolder, vTodayDate.Year.ToString());
                Directory.CreateDirectory(vPathYear);

                string vPathMonth = Path.Combine(vPathYear, vTodayDate.ToString("MM"));
                Directory.CreateDirectory(vPathMonth);

                string vPathDate = Path.Combine(vPathMonth, vTodayDate.ToString("ddMMyyyy"));
                Directory.CreateDirectory(vPathDate);

                // Copy today's CSV files
                foreach (var vCsvFile in Directory.EnumerateFiles(vCsvFolder, "*.csv"))
                {
                    var vFileDate = File.GetLastWriteTime(vCsvFile).Date;
                    if (vFileDate == vTodayDate)
                    {
                        string vCsvDestFile = Path.Combine(vPathDate, Path.GetFileName(vCsvFile));
                        if (!File.Exists(vCsvDestFile))
                            File.Copy(vCsvFile, vCsvDestFile);
                    }
                }

                // Convert CSV → Excel
                foreach (var vCsvFile in Directory.EnumerateFiles(vPathDate, "*.csv"))
                {
                    string vExcelFile = Path.ChangeExtension(vCsvFile, ".xlsx");

                    if (!File.Exists(vExcelFile))
                    {
                        using (var oWorkbook = new XLWorkbook())
                        {
                            var oWorksheet = oWorkbook.Worksheets.Add("Sheet1");
                            int vRowIndex = 1;

                            using (var oReader = new StreamReader(vCsvFile))
                            {
                                while (!oReader.EndOfStream)
                                {
                                    var vValues = oReader.ReadLine().Split(',');
                                    for (int vColIndex = 0; vColIndex < vValues.Length; vColIndex++)
                                        oWorksheet.Cell(vRowIndex, vColIndex + 1).Value = vValues[vColIndex];
                                    vRowIndex++;
                                }
                            }

                            oWorkbook.SaveAs(vExcelFile);
                        }
                    }

                    // Insert Excel data into SQL
                    try
                    {
                        oSqlData.ProcessFile(vExcelFile);
                    }
                    catch (Exception oEx)
                    {
                        Console.WriteLine($"Error inserting SQL for {vExcelFile}: {oEx.Message}");
                    }
                }

                Console.WriteLine("✅ EMS Processing completed successfully.");
            }
            catch (Exception oEx)
            {
                Console.WriteLine($"Unexpected error: {oEx.Message}");
            }
        }
    }
}








using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.IO;
using ExcelDataReader;

namespace EmsConsole
{
    public class DataParser
    {
        private readonly string _connectionString;

        public DataParser(string connectionString)
        {
            _connectionString = connectionString;
        }

        public void ParseAndInsert(string filePath)
        {
            System.Text.Encoding.RegisterProvider(System.Text.CodePagesEncodingProvider.Instance);

            using (var stream = File.Open(filePath, FileMode.Open, FileAccess.Read))
            using (var reader = ExcelReaderFactory.CreateReader(stream))
            {
                var headerMap = new Dictionary<string, int>(StringComparer.OrdinalIgnoreCase);
                string gatewayName = null;
                string deviceName = null;

                bool headerRowRead = false;

                while (reader.Read())
                {
                    if (!headerRowRead)
                    {
                        for (int i = 0; i < reader.FieldCount; i++)
                        {
                            string colName = reader.GetValue(i)?.ToString().Trim();

                            if (!string.IsNullOrEmpty(colName))
                                headerMap[colName] = i;
                        }
                        headerRowRead = true;

                        // Capture gateway + device name (they are in next row after headers)
                        gatewayName = reader.GetValue(headerMap["Gateway Name"])?.ToString();
                        deviceName = reader.GetValue(headerMap["Device Name"])?.ToString();

                        continue;
                    }

                    // Skip blank rows
                    if (reader.GetValue(0) == null) continue;

                    // Get Local timestamp
                    string localTimeStamp = reader.GetValue(headerMap["Local time stamp"])?.ToString();

                    // Find energy column (OR condition)
                    string[] possibleNames = {
                        "TotalActiveDeliveredEnergy (Wh)",
                        "Active energy (Wh)",
                        "Active energy delivered (Wh)"
                    };

                    object energyVal = null;
                    foreach (var name in possibleNames)
                    {
                        if (headerMap.ContainsKey(name))
                        {
                            energyVal = reader.GetValue(headerMap[name]);
                            break;
                        }
                    }

                    if (!string.IsNullOrEmpty(localTimeStamp) && energyVal != null)
                    {
                        InsertToDb(gatewayName, deviceName, localTimeStamp, energyVal.ToString());
                    }
                }
            }
        }

        private void InsertToDb(string gatewayName, string deviceName, string localTimeStamp, string energyValue)
        {
            using (SqlConnection conn = new SqlConnection(_connectionString))
            {
                conn.Open();
                string query = @"INSERT INTO EnergyData
                                (GatewayName, DeviceName, LocalTimeStamp, ActiveEnergy)
                                VALUES (@GatewayName, @DeviceName, @LocalTimeStamp, @ActiveEnergy)";

                using (SqlCommand cmd = new SqlCommand(query, conn))
                {
                    cmd.Parameters.AddWithValue("@GatewayName", gatewayName ?? (object)DBNull.Value);
                    cmd.Parameters.AddWithValue("@DeviceName", deviceName ?? (object)DBNull.Value);
                    cmd.Parameters.AddWithValue("@LocalTimeStamp", localTimeStamp ?? (object)DBNull.Value);
                    cmd.Parameters.AddWithValue("@ActiveEnergy", energyValue ?? (object)DBNull.Value);

                    cmd.ExecuteNonQuery();
                }
            }
        }
    }
}




CREATE SCHEMA ems;
GO

-- Device table
CREATE TABLE ems.Device
(
    DeviceId INT IDENTITY(1,1) PRIMARY KEY,
    GatewayName NVARCHAR(200) NOT NULL,
    DeviceName NVARCHAR(200) NOT NULL,
    CONSTRAINT UQ_Device UNIQUE (GatewayName, DeviceName)
);
GO

-- Energy Readings table
CREATE TABLE ems.EnergyReadings
(
    ReadingId INT IDENTITY(1,1) PRIMARY KEY,
    DeviceId INT NOT NULL,
    LocalTimestamp DATETIME NOT NULL,
    ActiveEnergyDelivered FLOAT NOT NULL,
    FOREIGN KEY (DeviceId) REFERENCES ems.Device(DeviceId)
);
GO




using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data.SqlClient;
using System.Globalization;
using System.IO;
using System.Linq;

namespace EmsConsole
{
    class CsvParser
    {
        public static void ParseAndInsert(string csvFile, string logFile)
        {
            try
            {
                string[] allLines = File.ReadAllLines(csvFile);
                if (allLines.Length == 0) return;

                // find header row dynamically
                int headerRowIndex = -1;
                string[] headers = null;

                try
                {
                    for (int i = 0; i < allLines.Length; i++)
                    {
                        var cols = allLines[i].Split(',').Select(c => c.Trim()).ToArray();
                        if (cols.Any(c => c.Equals("Gateway Name", StringComparison.OrdinalIgnoreCase)))
                        {
                            headers = cols;
                            headerRowIndex = i;
                            break;
                        }
                    }
                }
                catch (Exception ex)
                {
                    LogError(logFile, csvFile, "Error while finding header row", ex);
                    return;
                }

                if (headers == null)
                {
                    LogError(logFile, csvFile, "Header row not found in file", null);
                    return;
                }

                // column indexes
                int gatewayIndex = Array.FindIndex(headers, h => h.Equals("Gateway Name", StringComparison.OrdinalIgnoreCase));
                int deviceIndex = Array.FindIndex(headers, h => h.Equals("Device Name", StringComparison.OrdinalIgnoreCase));
                int timeIndex = Array.FindIndex(headers, h => h.Equals("Local Time Stamp", StringComparison.OrdinalIgnoreCase));
                int energyIndex = Array.FindIndex(headers, h =>
                    h.Equals("TotalDeliveredActiveEnergy (Wh)", StringComparison.OrdinalIgnoreCase) ||
                    h.Equals("Active energy (Wh)", StringComparison.OrdinalIgnoreCase) ||
                    h.Equals("Active energy delivered (Wh)", StringComparison.OrdinalIgnoreCase));

                if (gatewayIndex == -1 || deviceIndex == -1 || timeIndex == -1 || energyIndex == -1)
                {
                    LogError(logFile, csvFile, "Missing required column(s) in file", null);
                    return;
                }

                // Gateway & Device from row immediately after headers
                string[] firstDataRow = allLines[headerRowIndex + 1].Split(',').Select(c => c.Trim()).ToArray();
                string gatewayName = firstDataRow[gatewayIndex];
                string deviceName = firstDataRow[deviceIndex];

                // Collect readings
                var records = new List<(DateTime LocalTime, double Energy)>();

                try
                {
                    for (int i = headerRowIndex + 1; i < allLines.Length; i++)
                    {
                        var cols = allLines[i].Split(',').Select(c => c.Trim()).ToArray();
                        if (cols.Length <= Math.Max(timeIndex, energyIndex)) continue;

                        if (DateTime.TryParse(cols[timeIndex], out DateTime localTime) &&
                            double.TryParse(cols[energyIndex], NumberStyles.Any, CultureInfo.InvariantCulture, out double energyValue))
                        {
                            records.Add((localTime, energyValue));
                        }
                    }
                }
                catch (Exception ex)
                {
                    LogError(logFile, csvFile, "Error while parsing data rows", ex);
                    return;
                }

                // insert into DB
                try
                {
                    InsertIntoDatabase(gatewayName, deviceName, records, logFile, csvFile);
                }
                catch (Exception ex)
                {
                    LogError(logFile, csvFile, "Error while inserting into database", ex);
                }
            }
            catch (Exception ex)
            {
                LogError(logFile, csvFile, "General error in ParseAndInsert", ex);
            }
        }

        private static void InsertIntoDatabase(string gateway, string device, List<(DateTime LocalTime, double Energy)> records, string logFile, string csvFile)
        {
            try
            {
                string connectionString = ConfigurationManager.ConnectionStrings["EmsDb"].ConnectionString;

                using (SqlConnection conn = new SqlConnection(connectionString))
                {
                    conn.Open();

                    // check if device exists
                    int deviceId;
                    string checkSql = "SELECT DeviceId FROM ems.Device WHERE GatewayName = @GatewayName AND DeviceName = @DeviceName";

                    using (SqlCommand cmd = new SqlCommand(checkSql, conn))
                    {
                        cmd.Parameters.AddWithValue("@GatewayName", gateway);
                        cmd.Parameters.AddWithValue("@DeviceName", device);

                        object result = cmd.ExecuteScalar();
                        if (result != null)
                        {
                            deviceId = Convert.ToInt32(result);
                        }
                        else
                        {
                            // insert new device
                            string insertDeviceSql = @"
                                INSERT INTO ems.Device (GatewayName, DeviceName) 
                                OUTPUT INSERTED.DeviceId 
                                VALUES (@GatewayName, @DeviceName)";
                            using (SqlCommand insertCmd = new SqlCommand(insertDeviceSql, conn))
                            {
                                insertCmd.Parameters.AddWithValue("@GatewayName", gateway);
                                insertCmd.Parameters.AddWithValue("@DeviceName", device);
                                deviceId = (int)insertCmd.ExecuteScalar();
                            }
                        }
                    }

                    // insert energy readings
                    string insertReadingSql = @"
                        INSERT INTO ems.EnergyReadings (DeviceId, LocalTimestamp, ActiveEnergyDelivered)
                        VALUES (@DeviceId, @LocalTimestamp, @Energy)";

                    foreach (var record in records)
                    {
                        using (SqlCommand cmd = new SqlCommand(insertReadingSql, conn))
                        {
                            cmd.Parameters.AddWithValue("@DeviceId", deviceId);
                            cmd.Parameters.AddWithValue("@LocalTimestamp", record.LocalTime);
                            cmd.Parameters.AddWithValue("@Energy", record.Energy);
                            cmd.ExecuteNonQuery();
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                LogError(logFile, csvFile, "Error inside InsertIntoDatabase", ex);
            }
        }

        private static void LogError(string logFile, string csvFile, string stage, Exception ex)
        {
            try
            {
                string message = $"{DateTime.Now:u} | File: {Path.GetFileName(csvFile)} | Stage: {stage}";
                if (ex != null) message += $" | Error: {ex.Message}";
                message += Environment.NewLine;

                File.AppendAllText(logFile, message);
            }
            catch
            {
                // failsafe: do nothing if even logging fails
            }
        }
    }
}




using System;
using System.Configuration;
using System.Data.SqlClient;
using System.Globalization;
using System.IO;

namespace EmsConsole
{
    public static class CsvParser
    {
        public static void ParseAndInsert(string vCsvFile, string vLogFile)
        {
            try
            {
                string vConnectionString = ConfigurationManager.ConnectionStrings["EmsDb"].ConnectionString;

                using (SqlConnection vConn = new SqlConnection(vConnectionString))
                {
                    vConn.Open();

                    using (StreamReader vReader = new StreamReader(vCsvFile))
                    {
                        string vLine;
                        bool vHeaderSkipped = false;

                        while ((vLine = vReader.ReadLine()) != null)
                        {
                            if (!vHeaderSkipped)
                            {
                                vHeaderSkipped = true; // Skip header row
                                continue;
                            }

                            string[] vColumns = vLine.Split(',');

                            if (vColumns.Length < 3)
                                continue; // skip invalid rows

                            string vGateway = vColumns[0].Trim();
                            string vDevice = vColumns[1].Trim();
                            string vTimestamp = vColumns[2].Trim();
                            string vEnergy = vColumns.Length > 3 ? vColumns[3].Trim() : null;

                            DateTime vLocalTimestamp;
                            if (!DateTime.TryParse(vTimestamp, CultureInfo.InvariantCulture, DateTimeStyles.None, out vLocalTimestamp))
                                vLocalTimestamp = DateTime.Now;

                            decimal vTotalEnergy;
                            if (!decimal.TryParse(vEnergy, out vTotalEnergy))
                                vTotalEnergy = 0;

                            string vSql = @"
                                INSERT INTO EmsEnergyData 
                                (GatewayName, DeviceName, LocalTimestamp, TotalActiveDeliveredEnergy) 
                                VALUES (@Gateway, @Device, @Timestamp, @Energy)";

                            using (SqlCommand vCmd = new SqlCommand(vSql, vConn))
                            {
                                vCmd.Parameters.AddWithValue("@Gateway", vGateway);
                                vCmd.Parameters.AddWithValue("@Device", vDevice);
                                vCmd.Parameters.AddWithValue("@Timestamp", vLocalTimestamp);
                                vCmd.Parameters.AddWithValue("@Energy", vTotalEnergy);

                                vCmd.ExecuteNonQuery();
                            }
                        }
                    }
                }
            }
            catch (Exception oEx)
            {
                File.AppendAllText(vLogFile, $"{DateTime.Now}: {oEx.Message}{Environment.NewLine}");
            }
        }
    }
}