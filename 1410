{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  },
  "AllowedHosts": "*",

  "Nanonets": {
    "ApiKey": "ac726bc1-a8e2-11f0-b43d-26be86793e37",
    "InstantModelId": "b7d06180-149b-41f6-bfbb-ab981024e8af",
    "TableModelId": "dfa41b4e-d52f-4e76-baca-9dff3abe2fc4"
  },

  "FileSettings": {
    "UploadFolder": "Uploads"
  }
}


using Microsoft.AspNetCore.Builder;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;

var builder = WebApplication.CreateBuilder(args);

// Add services for MVC
builder.Services.AddControllersWithViews();

var app = builder.Build();

// Enable static files (for wwwroot)
app.UseStaticFiles();

// Routing
app.UseRouting();
app.MapControllerRoute(
    name: "default",
    pattern: "{controller=Pdf}/{action=Index}/{id?}");

app.Run();


using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Hosting;
using Microsoft.Extensions.Configuration;
using System.Net.Http.Headers;
using System.Text.Json;

namespace YourProject.Controllers
{
    public class PdfController : Controller
    {
        private readonly IWebHostEnvironment _env;
        private readonly string apiKey;
        private readonly string instantModelId;
        private readonly string tableModelId;
        private readonly string uploadFolder;

        public PdfController(IWebHostEnvironment env, IConfiguration config)
        {
            _env = env;
            apiKey = config["Nanonets:ApiKey"];
            instantModelId = config["Nanonets:InstantModelId"];
            tableModelId = config["Nanonets:TableModelId"];
            uploadFolder = config["FileSettings:UploadFolder"] ?? "Uploads";
        }

        public IActionResult Index()
        {
            return View();
        }

        [HttpPost]
        public async Task<IActionResult> ProcessFile(IFormFile file)
        {
            if (file == null || file.Length == 0)
                return Content("Please upload a valid file.");

            string uploads = Path.Combine(_env.WebRootPath, uploadFolder);
            if (!Directory.Exists(uploads))
                Directory.CreateDirectory(uploads);

            string filePath = Path.Combine(uploads, Path.GetFileName(file.FileName));
            using (var stream = new FileStream(filePath, FileMode.Create))
            {
                await file.CopyToAsync(stream);
            }

            string csvPath = Path.Combine(uploads, Path.GetFileNameWithoutExtension(file.FileName) + "_data.csv");

            using var client = new HttpClient();
            client.DefaultRequestHeaders.Authorization =
                new AuthenticationHeaderValue("Basic",
                Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes($"{apiKey}:")));

            // ---------- Instant Model (text + labels)
            var instantContent = new MultipartFormDataContent();
            instantContent.Add(new StreamContent(System.IO.File.OpenRead(filePath)), "file", file.FileName);
            var instantResponse = await client.PostAsync($"https://app.docstrange.ai/api/models/{instantModelId}/inference/file/", instantContent);
            var instantJson = await instantResponse.Content.ReadAsStringAsync();

            // ---------- Tables Model
            var tableContent = new MultipartFormDataContent();
            tableContent.Add(new StreamContent(System.IO.File.OpenRead(filePath)), "file", file.FileName);
            var tableResponse = await client.PostAsync($"https://app.docstrange.ai/api/models/{tableModelId}/inference/file/", tableContent);
            var tableJson = await tableResponse.Content.ReadAsStringAsync();

            // ---------- Combine both into one CSV
            using (var writer = new StreamWriter(csvPath))
            {
                writer.WriteLine("Label,Value");

                try
                {
                    using var doc = JsonDocument.Parse(instantJson);
                    var root = doc.RootElement.GetProperty("result")[0];
                    if (root.TryGetProperty("prediction", out var preds))
                    {
                        foreach (var p in preds.EnumerateArray())
                        {
                            string label = p.GetProperty("label").GetString() ?? "";
                            string text = p.GetProperty("ocr_text").GetString() ?? "";
                            writer.WriteLine($"\"{label}\",\"{text.Replace("\"", "\"\"")}\"");
                        }
                    }
                }
                catch { writer.WriteLine("Error reading instant model data"); }

                writer.WriteLine(); // empty line between sections
                writer.WriteLine("Table,Table");

                try
                {
                    using var doc2 = JsonDocument.Parse(tableJson);
                    var root2 = doc2.RootElement.GetProperty("result")[0];

                    if (root2.TryGetProperty("tables", out var tables))
                    {
                        foreach (var table in tables.EnumerateArray())
                        {
                            var rows = table.GetProperty("rows");
                            foreach (var row in rows.EnumerateArray())
                            {
                                List<string> cells = new();
                                foreach (var cell in row.EnumerateArray())
                                {
                                    string text = cell.GetProperty("text").GetString() ?? "";
                                    cells.Add($"\"{text.Replace("\"", "\"\"")}\"");
                                }
                                writer.WriteLine("Table," + string.Join(",", cells));
                            }
                        }
                    }
                }
                catch { writer.WriteLine("Error reading table model data"); }
            }

            return File(System.IO.File.OpenRead(csvPath), "text/csv", Path.GetFileName(csvPath));
        }
    }
}



@{
    ViewData["Title"] = "Document Extraction";
}

<div style="margin:50px auto; width:60%; text-align:center;">
    <h2>Upload Document for Extraction</h2>

    <form asp-controller="Pdf" asp-action="ProcessFile" enctype="multipart/form-data" method="post">
        <input type="file" name="file" class="form-control" required style="margin:15px 0;" />
        <button type="submit" class="btn btn-primary">Process & Download CSV</button>
    </form>

    <p style="margin-top:20px;color:gray;">
        Supported formats: PDF, DOCX, PNG, JPG
    </p>
</div>







