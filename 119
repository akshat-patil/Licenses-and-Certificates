using System;
using System.Collections.Generic;
using System.Configuration;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading;
using Microsoft.Data.Sqlite;
using Newtonsoft.Json;

namespace Assembly3DCamera
{
    class Program
    {
        private static Dictionary<string, long> vLastExportedRowId = new Dictionary<string, long>();
        private static Timer oTimer;
        private static string vTrackerFile;

        static void Main(string[] args)
        {
            string vDB_CSD = ConfigurationManager.AppSettings["DB_CSD"],
                   vCsvFile = ConfigurationManager.AppSettings["Db_CsvFile"],
                   vLogFile = Path.Combine(vDB_CSD, "exceptions.txt");

            if (string.IsNullOrWhiteSpace(vDB_CSD) || string.IsNullOrWhiteSpace(vCsvFile))
            {
                Console.WriteLine("Please set DB_CSD and Db_CsvFile in App.config.");
                return;
            }

            Directory.CreateDirectory(Path.GetDirectoryName(vCsvFile));
            vTrackerFile = Path.Combine(Path.GetDirectoryName(vCsvFile), "export_tracker.json");

            if (File.Exists(vTrackerFile))
            {
                vLastExportedRowId = JsonConvert.DeserializeObject<Dictionary<string, long>>(File.ReadAllText(vTrackerFile));
            }

            oTimer = new Timer(delegate { ExportDbToCsv(vDB_CSD, vCsvFile, vLogFile); }, null, TimeSpan.Zero, TimeSpan.FromMinutes(5));

            Console.WriteLine("Export started.");
            Console.ReadLine();
        }

        static void ExportDbToCsv(string vDB_CSD, string vCsvPath, string vLogFile)
        {
            try
            {
                string vDbFile = Directory.GetFiles(vDB_CSD, "*.db")
                    .OrderByDescending(f => new FileInfo(f).LastWriteTime)
                    .FirstOrDefault();

                if (vDbFile == null)
                {
                    Console.WriteLine($"[{DateTime.Now}] No .db file found in: " + vDB_CSD);
                    return;
                }

                using (var oConn = new SqliteConnection("Data Source=" + vDbFile))
                {
                    oConn.Open();

                    List<string> vTables = new List<string>();
                    using (var oTblCmd = oConn.CreateCommand())
                    {
                        oTblCmd.CommandText = "SELECT name FROM sqlite_master WHERE type='table' AND name NOT LIKE 'sqlite_%';";
                        using (var oTblReader = oTblCmd.ExecuteReader())
                        {
                            while (oTblReader.Read())
                                vTables.Add(oTblReader.GetString(0));
                        }
                    }

                    // Ensure CSV file exists with headers
                    if (!File.Exists(vCsvPath))
                    {
                        using (var writer = new StreamWriter(vCsvPath, false, Encoding.UTF8))
                        {
                            // Write header row (tblName + DB columns)
                            string firstTable = vTables.FirstOrDefault();
                            if (firstTable != null)
                            {
                                using (var cmd = oConn.CreateCommand())
                                {
                                    cmd.CommandText = $"SELECT * FROM \"{firstTable}\" LIMIT 1;";
                                    using (var rdr = cmd.ExecuteReader())
                                    {
                                        List<string> headers = new List<string> { "tblName" };
                                        for (int i = 0; i < rdr.FieldCount; i++)
                                            headers.Add(rdr.GetName(i));
                                        writer.WriteLine(string.Join(",", headers));
                                    }
                                }
                            }
                        }
                    }

                    // Load current CSV into memory
                    List<string> lines = File.ReadAllLines(vCsvPath).ToList();
                    string headerLine = lines[0];
                    Dictionary<string, int> tableInsertPositions = new Dictionary<string, int>();

                    // Find last row position per table in CSV
                    for (int i = 1; i < lines.Count; i++)
                    {
                        string tblName = lines[i].Split(',')[0];
                        tableInsertPositions[tblName] = i;
                    }

                    foreach (var vTable in vTables)
                    {
                        try
                        {
                            ExportTableRows(oConn, vTable, lines, tableInsertPositions);
                        }
                        catch (Exception exTable)
                        {
                            string vMessage = $"[{DateTime.Now}] Table '{vTable}': {exTable}\n";
                            File.AppendAllText(vLogFile, vMessage);
                        }
                    }

                    File.WriteAllLines(vCsvPath, lines, Encoding.UTF8);
                }

                File.WriteAllText(vTrackerFile, JsonConvert.SerializeObject(vLastExportedRowId));
                Console.WriteLine($"[{DateTime.Now}] Check complete â€” all tables processed.");
            }
            catch (Exception ex)
            {
                File.AppendAllText(vLogFile, $"[{DateTime.Now}] General DB read error: {ex}\n");
                Console.WriteLine("Error reading DB: " + ex.Message);
            }
        }

        static void ExportTableRows(SqliteConnection oConn, string vTable, List<string> lines, Dictionary<string, int> tableInsertPositions)
        {
            long vLastRowId = vLastExportedRowId.ContainsKey(vTable) ? vLastExportedRowId[vTable] : 0;

            string vQuery = vLastRowId == 0
                ? $"SELECT ROWID, * FROM \"{vTable}\";"
                : $"SELECT ROWID, * FROM \"{vTable}\" WHERE ROWID > {vLastRowId};";

            using (var cmd = oConn.CreateCommand())
            {
                cmd.CommandText = vQuery;
                using (var rdr = cmd.ExecuteReader())
                {
                    if (!rdr.HasRows) return;

                    long vMaxRowId = vLastRowId;
                    List<string> newLines = new List<string>();

                    while (rdr.Read())
                    {
                        long vRowId = rdr.GetInt64(0);
                        vMaxRowId = Math.Max(vMaxRowId, vRowId);

                        List<string> fields = new List<string> { vTable };
                        for (int i = 1; i < rdr.FieldCount; i++)
                            fields.Add(rdr.IsDBNull(i) ? "" : EscapeCsvField(rdr.GetValue(i).ToString()));

                        newLines.Add(string.Join(",", fields));
                    }

                    // Insert new rows after this table's last block
                    int insertPos = tableInsertPositions.ContainsKey(vTable) ? tableInsertPositions[vTable] + 1 : lines.Count;
                    lines.InsertRange(insertPos, newLines);

                    // Update tracker
                    vLastExportedRowId[vTable] = vMaxRowId;
                    tableInsertPositions[vTable] = insertPos + newLines.Count - 1;

                    Console.WriteLine($"[{DateTime.Now}] Exported {newLines.Count} new rows from '{vTable}'.");
                }
            }
        }

        static string EscapeCsvField(string value)
        {
            if (value == null) return "";
            bool mustQuote = value.Contains(",") || value.Contains("\"") || value.Contains("\n") || value.Contains("\r");
            if (value.Contains("\"")) value = value.Replace("\"", "\"\"");
            return mustQuote ? $"\"{value}\"" : value;
        }
    }
}