using System;
using System.Collections.Generic;
using System.Data.SQLite;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading;

class Program
{
    static void Main(string[] args)
    {
        string dbFolder = @"C:\YourDBFolder";   // ðŸ”¹ Change this path
        string outputCsv = @"C:\YourOutputFolder\merged.csv"; // ðŸ”¹ Final single CSV
        string trackerFile = @"C:\YourOutputFolder\export_tracker.txt";

        // dictionary to track last exported row id for each table
        Dictionary<string, long> lastExportedRowId = LoadTracker(trackerFile);

        while (true)
        {
            Console.WriteLine($"{DateTime.Now:yyyy-MM-dd HH:mm:ss} â†’ Checking DB folder...");

            foreach (string dbFile in Directory.GetFiles(dbFolder, "*.db"))
            {
                using (var connection = new SQLiteConnection($"Data Source={dbFile};Version=3;"))
                {
                    connection.Open();

                    // get all table names
                    var cmd = new SQLiteCommand("SELECT name FROM sqlite_master WHERE type='table';", connection);
                    var reader = cmd.ExecuteReader();
                    while (reader.Read())
                    {
                        string tableName = reader.GetString(0);
                        Console.WriteLine($"   Processing table: {tableName}");

                        // check if tracker has entry
                        if (!lastExportedRowId.ContainsKey(tableName))
                            lastExportedRowId[tableName] = 0;

                        long lastId = lastExportedRowId[tableName];

                        // fetch only new rows
                        string sql = $"SELECT rowid, * FROM {tableName} WHERE rowid > {lastId} ORDER BY rowid ASC;";
                        using (var adapter = new SQLiteDataAdapter(sql, connection))
                        using (var dt = new System.Data.DataTable())
                        {
                            adapter.Fill(dt);

                            if (dt.Rows.Count > 0)
                            {
                                bool fileExists = File.Exists(outputCsv);

                                using (var writer = new StreamWriter(outputCsv, true, Encoding.UTF8))
                                {
                                    // if file doesn't exist, write header (tblName + column names)
                                    if (!fileExists)
                                    {
                                        string header = "tblName," + string.Join(",", dt.Columns.Cast<System.Data.DataColumn>().Select(c => c.ColumnName));
                                        writer.WriteLine(header);
                                    }

                                    // append new rows
                                    foreach (System.Data.DataRow row in dt.Rows)
                                    {
                                        var values = row.ItemArray.Select(v => v?.ToString().Replace(",", " ")); // avoid CSV issues
                                        writer.WriteLine(tableName + "," + string.Join(",", values));
                                    }
                                }

                                // update last row id
                                lastExportedRowId[tableName] = Convert.ToInt64(dt.Rows[dt.Rows.Count - 1]["rowid"]);

                                Console.WriteLine($"      â†’ Added {dt.Rows.Count} new rows");
                            }
                            else
                            {
                                Console.WriteLine("      â†’ No new rows");
                            }
                        }
                    }
                }
            }

            // save tracker state
            SaveTracker(trackerFile, lastExportedRowId);

            Console.WriteLine($"{DateTime.Now:yyyy-MM-dd HH:mm:ss} â†’ Check complete. Next run in 5 minutes.\n");
            Thread.Sleep(TimeSpan.FromMinutes(5));
        }
    }

    static Dictionary<string, long> LoadTracker(string trackerFile)
    {
        var dict = new Dictionary<string, long>();
        if (File.Exists(trackerFile))
        {
            foreach (var line in File.ReadAllLines(trackerFile))
            {
                var parts = line.Split('=');
                if (parts.Length == 2 && long.TryParse(parts[1], out long rowId))
                    dict[parts[0]] = rowId;
            }
        }
        return dict;
    }

    static void SaveTracker(string trackerFile, Dictionary<string, long> data)
    {
        var lines = data.Select(kvp => $"{kvp.Key}={kvp.Value}");
        File.WriteAllLines(trackerFile, lines);
    }
}