using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;

namespace Assembly3DCamera
{
    public static class CsvMerger
    {
        public static void MergeByLot(string folderPath)
        {
            string combinedFile = Path.Combine(folderPath, "combined.csv");

            // Collect all CSV files in folder except combined.csv itself
            var csvFiles = Directory.GetFiles(folderPath, "*.csv")
                                    .Where(f => !f.EndsWith("combined.csv"))
                                    .ToList();

            if (csvFiles.Count == 0)
            {
                Console.WriteLine($"[{DateTime.Now}] No CSV files found in {folderPath} to merge.");
                return;
            }

            var lotGroups = new Dictionary<string, Dictionary<string, string>>();
            var allColumns = new HashSet<string>();

            foreach (var file in csvFiles)
            {
                string[] lines = File.ReadAllLines(file);
                if (lines.Length == 0) continue;

                string[] headers = lines[0].Split(',');
                int lotIndex = Array.IndexOf(headers, "LOT");
                if (lotIndex == -1)
                {
                    Console.WriteLine($"[{DateTime.Now}] File {Path.GetFileName(file)} does not contain LOT column, skipping.");
                    continue;
                }

                // Register headers (except LOT, since it's the identifier)
                foreach (var h in headers)
                    if (h != "LOT")
                        allColumns.Add(h);

                // Process rows
                for (int i = 1; i < lines.Length; i++)
                {
                    if (string.IsNullOrWhiteSpace(lines[i])) continue;
                    string[] values = SplitCsvLine(lines[i]);

                    if (lotIndex >= values.Length) continue;

                    string lotValue = values[lotIndex];
                    if (!lotGroups.ContainsKey(lotValue))
                        lotGroups[lotValue] = new Dictionary<string, string>();

                    for (int j = 0; j < headers.Length; j++)
                    {
                        if (j == lotIndex) continue; // skip LOT
                        string col = headers[j];
                        string val = j < values.Length ? values[j] : "";

                        if (!string.IsNullOrEmpty(val))
                            lotGroups[lotValue][col] = val;
                    }
                }
            }

            // --- Write combined file ---
            using (var writer = new StreamWriter(combinedFile))
            {
                var orderedColumns = new List<string> { "LOT" };
                orderedColumns.AddRange(allColumns.OrderBy(c => c));

                writer.WriteLine(string.Join(",", orderedColumns));

                foreach (var lot in lotGroups.Keys.OrderBy(k => k))
                {
                    var row = new List<string> { lot };
                    foreach (var col in orderedColumns.Skip(1))
                    {
                        lotGroups[lot].TryGetValue(col, out string val);
                        row.Add(EscapeCsv(val));
                    }
                    writer.WriteLine(string.Join(",", row));
                }
            }

            Console.WriteLine($"[{DateTime.Now}] Combined CSV created at {combinedFile}");
        }

        // --- Helper to safely split a CSV line (handles quotes) ---
        private static string[] SplitCsvLine(string line)
        {
            var result = new List<string>();
            bool inQuotes = false;
            var value = "";

            for (int i = 0; i < line.Length; i++)
            {
                char c = line[i];
                if (c == '"' )
                {
                    if (inQuotes && i + 1 < line.Length && line[i + 1] == '"')
                    {
                        value += '"';
                        i++;
                    }
                    else
                    {
                        inQuotes = !inQuotes;
                    }
                }
                else if (c == ',' && !inQuotes)
                {
                    result.Add(value);
                    value = "";
                }
                else
                {
                    value += c;
                }
            }
            result.Add(value);
            return result.ToArray();
        }

        // --- Escape CSV values when writing ---
        private static string EscapeCsv(string val)
        {
            if (val == null) return "";
            bool mustQuote = val.Contains(",") || val.Contains("\"") || val.Contains("\n") || val.Contains("\r");
            if (val.Contains("\"")) val = val.Replace("\"", "\"\"");
            return mustQuote ? $"\"{val}\"" : val;
        }
    }
}