using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;

namespace Assembly3DCamera
{
    public static class CsvMerger
    {
        public static void MergeByLot(string folderPath)
        {
            string combinedFile = Path.Combine(folderPath, "combined.csv");

            // Collect all CSV files in folder except combined.csv itself
            var csvFiles = Directory.GetFiles(folderPath, "*.csv")
                                    .Where(f => !f.EndsWith("combined.csv"))
                                    .ToList();

            if (csvFiles.Count == 0)
            {
                Console.WriteLine($"[{DateTime.Now}] No CSV files found in {folderPath} to merge.");
                return;
            }

            var lotGroups = new Dictionary<string, Dictionary<string, string>>();
            var allColumns = new HashSet<string>();

            foreach (var file in csvFiles)
            {
                string[] lines = File.ReadAllLines(file);
                if (lines.Length == 0) continue;

                string[] headers = lines[0].Split(',');
                int lotIndex = Array.IndexOf(headers, "LOT");
                if (lotIndex == -1)
                {
                    Console.WriteLine($"[{DateTime.Now}] File {Path.GetFileName(file)} does not contain LOT column, skipping.");
                    continue;
                }

                // Register headers (except LOT, since it's the identifier)
                foreach (var h in headers)
                    if (h != "LOT")
                        allColumns.Add(h);

                // Process rows
                for (int i = 1; i < lines.Length; i++)
                {
                    if (string.IsNullOrWhiteSpace(lines[i])) continue;
                    string[] values = SplitCsvLine(lines[i]);

                    if (lotIndex >= values.Length) continue;

                    string lotValue = values[lotIndex];
                    if (!lotGroups.ContainsKey(lotValue))
                        lotGroups[lotValue] = new Dictionary<string, string>();

                    for (int j = 0; j < headers.Length; j++)
                    {
                        if (j == lotIndex) continue; // skip LOT
                        string col = headers[j];
                        string val = j < values.Length ? values[j] : "";

                        if (!string.IsNullOrEmpty(val))
                            lotGroups[lotValue][col] = val;
                    }
                }
            }

            // --- Write combined file ---
            using (var writer = new StreamWriter(combinedFile))
            {
                var orderedColumns = new List<string> { "LOT" };
                orderedColumns.AddRange(allColumns.OrderBy(c => c));

                writer.WriteLine(string.Join(",", orderedColumns));

                foreach (var lot in lotGroups.Keys.OrderBy(k => k))
                {
                    var row = new List<string> { lot };
                    foreach (var col in orderedColumns.Skip(1))
                    {
                        lotGroups[lot].TryGetValue(col, out string val);
                        row.Add(EscapeCsv(val));
                    }
                    writer.WriteLine(string.Join(",", row));
                }
            }

            Console.WriteLine($"[{DateTime.Now}] Combined CSV created at {combinedFile}");
        }

        // --- Helper to safely split a CSV line (handles quotes) ---
        private static string[] SplitCsvLine(string line)
        {
            var result = new List<string>();
            bool inQuotes = false;
            var value = "";

            for (int i = 0; i < line.Length; i++)
            {
                char c = line[i];
                if (c == '"' )
                {
                    if (inQuotes && i + 1 < line.Length && line[i + 1] == '"')
                    {
                        value += '"';
                        i++;
                    }
                    else
                    {
                        inQuotes = !inQuotes;
                    }
                }
                else if (c == ',' && !inQuotes)
                {
                    result.Add(value);
                    value = "";
                }
                else
                {
                    value += c;
                }
            }
            result.Add(value);
            return result.ToArray();
        }

        // --- Escape CSV values when writing ---
        private static string EscapeCsv(string val)
        {
            if (val == null) return "";
            bool mustQuote = val.Contains(",") || val.Contains("\"") || val.Contains("\n") || val.Contains("\r");
            if (val.Contains("\"")) val = val.Replace("\"", "\"\"");
            return mustQuote ? $"\"{val}\"" : val;
        }
    }
}

------

using System;
using System.Collections.Generic;
using System.Configuration;
using System.IO;
using System.Linq;
using System.Threading;
using Microsoft.Data.Sqlite;

namespace Assembly3DCamera
{
    class Program
    {
        private static Dictionary<string, long> vLastExportedRowId = new Dictionary<string, long>();
        private static Timer oTimer;

        static void Main(string[] args)
        {
            string vDB_CSD = ConfigurationManager.AppSettings["DB_CSD"],
                   vDb_Csv = ConfigurationManager.AppSettings["Db_Csv"],
                   vLogFile = Path.Combine(vDB_CSD, "exceptions.txt"),
                   vCheckpointFile = Path.Combine(vDB_CSD, "data.txt");

            if (string.IsNullOrWhiteSpace(vDB_CSD) || string.IsNullOrWhiteSpace(vDb_Csv))
            {
                Console.WriteLine("Please set DB_CSD and Db_Csv in App.config.");
                return;
            }

            Directory.CreateDirectory(vDb_Csv);
            if (!File.Exists(vLogFile)) File.Create(vLogFile).Dispose();

            vLastExportedRowId = DbToCsv.LoadCheckpoints(vCheckpointFile);

            oTimer = new Timer(delegate { ExportDb(vDB_CSD, vDb_Csv, vLogFile, vCheckpointFile); },
                               null, TimeSpan.Zero, TimeSpan.FromMinutes(5));

            Console.WriteLine("Export started.");
            Console.ReadLine();
        }

        static void ExportDb(string vDB_CSD, string vDb_Csv, string vLogFile, string vCheckpointFile)
        {
            try
            {
                string vDbFile = Directory.GetFiles(vDB_CSD, "*.db")
                                          .OrderByDescending(f => new FileInfo(f).LastWriteTime)
                                          .FirstOrDefault();

                if (vDbFile == null)
                {
                    Console.WriteLine($"[{DateTime.Now}] No .db file found in: " + vDB_CSD);
                    return;
                }

                string dbKey = Path.GetFileName(vDbFile);

                using (var oConn = new SqliteConnection("Data Source=" + vDbFile))
                {
                    oConn.Open();
                    using (var oTblCmd = oConn.CreateCommand())
                    {
                        oTblCmd.CommandText = "SELECT name FROM sqlite_master WHERE type='table' AND name NOT LIKE 'sqlite_%';";
                        using (var oTblReader = oTblCmd.ExecuteReader())
                        {
                            List<string> tables = new List<string>();
                            while (oTblReader.Read())
                                tables.Add(oTblReader.GetString(0));

                            foreach (string vTable in tables)
                            {
                                try
                                {
                                    // Global cumulative CSV export
                                    DbToCsv.mDbToCsv(oConn, vTable, vDb_Csv, dbKey, vLastExportedRowId);

                                    // SQL Server export
                                    DbToServer.mDbToServer(oConn, vTable, dbKey, vLastExportedRowId);

                                    // Daily export into YYYY/MM/DD folders
                                    DailyCsvExporter.ExportDaily(oConn, vTable, vDb_Csv, dbKey);
                                }
                                catch (Exception exTable)
                                {
                                    string vMessage = $"[{DateTime.Now}] Table '{vTable}': {exTable}\n";
                                    File.AppendAllText(vLogFile, vMessage);
                                }
                            }

                            // After all tables processed → merge daily CSVs into combined.csv
                            string todayPath = Path.Combine(
                                vDb_Csv,
                                DateTime.Now.ToString("yyyy"),
                                DateTime.Now.ToString("MM"),
                                DateTime.Now.ToString("dd")
                            );
                            try
                            {
                                CsvMerger.MergeByLot(todayPath);
                            }
                            catch (Exception exMerge)
                            {
                                string vMessage = $"[{DateTime.Now}] CSV Merge failed: {exMerge}\n";
                                File.AppendAllText(vLogFile, vMessage);
                                Console.WriteLine("Error merging CSVs: " + exMerge.Message);
                            }
                        }
                    }
                }

                DbToCsv.SaveCheckpoints(vCheckpointFile, vLastExportedRowId);
                Console.WriteLine($"[{DateTime.Now}] Check complete — all tables processed.");
            }
            catch (Exception ex)
            {
                File.AppendAllText(vLogFile, $"[{DateTime.Now}] General DB read error: {ex}\n");
                Console.WriteLine("Error reading DB: " + ex.Message);
            }
        }
    }
}