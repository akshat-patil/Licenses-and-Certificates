<?xml version="1.0" encoding="utf-8" ?>
<configuration>
  <connectionStrings>
    <add name="EmsDb"
         connectionString="Server=.\SQLEXPRESS;Database=ems;User Id=sa;Password=YourPassword;"
         providerName="System.Data.SqlClient"/>
  </connectionStrings>

  <appSettings>
    <add key="vEmsCsvInputFolder" value="C:\EMS\InputCSVs"/>
    <add key="vEmsCsvArchiveRoot" value="C:\EMS\Archive"/>
    <add key="vEmsErrorLogFile" value="C:\EMS\Logs\error_log.txt"/>
  </appSettings>
</configuration>




using System;
using System.Configuration;
using System.IO;

namespace EmsConsole
{
    class Program
    {
        static void Main(string[] args)
        {
            string vCsvInputFolder = ConfigurationManager.AppSettings["vEmsCsvInputFolder"];
            string vArchiveRootFolder = ConfigurationManager.AppSettings["vEmsCsvArchiveRoot"];
            string vLogFile = ConfigurationManager.AppSettings["vEmsErrorLogFile"];

            try
            {
                DateTime vToday = DateTime.Now;

                // Create Year folder
                string vYearFolder = Path.Combine(vArchiveRootFolder, vToday.Year.ToString());
                if (!Directory.Exists(vYearFolder)) Directory.CreateDirectory(vYearFolder);

                // Create Month folder
                string vMonthFolder = Path.Combine(vYearFolder, vToday.ToString("MM"));
                if (!Directory.Exists(vMonthFolder)) Directory.CreateDirectory(vMonthFolder);

                // Create Date folder
                string vDateFolder = Path.Combine(vMonthFolder, vToday.ToString("ddMMyyyy"));
                if (!Directory.Exists(vDateFolder)) Directory.CreateDirectory(vDateFolder);

                // Copy CSVs and process
                foreach (string vCsvFile in Directory.GetFiles(vCsvInputFolder, "*.csv"))
                {
                    string vDestFile = Path.Combine(vDateFolder, Path.GetFileName(vCsvFile));
                    File.Copy(vCsvFile, vDestFile, true);

                    Console.WriteLine($"Processing {vCsvFile}...");
                    CsvParser.ParseAndInsert(vDestFile, vLogFile);
                }
            }
            catch (Exception oEx)
            {
                File.AppendAllText(vLogFile, $"{DateTime.Now}: {oEx.Message}{Environment.NewLine}");
            }
        }
    }
}



using System;
using System.Configuration;
using System.Data.SqlClient;
using System.Globalization;
using System.IO;
using System.Linq;

namespace EmsConsole
{
    public static class CsvParser
    {
        public static void ParseAndInsert(string vCsvFilePath, string vLogFile)
        {
            try
            {
                string vConnectionString = ConfigurationManager.ConnectionStrings["EmsDb"].ConnectionString;

                using (SqlConnection oSqlConn = new SqlConnection(vConnectionString))
                {
                    oSqlConn.Open();
                    string[] vAllLines = File.ReadAllLines(vCsvFilePath);

                    if (vAllLines.Length < 2) return;

                    // Read header to find column indexes
                    string[] vHeader = vAllLines[0].Split(',');

                    int vGatewayCol = Array.FindIndex(vHeader, h => h.Equals("Gateway Name", StringComparison.OrdinalIgnoreCase));
                    int vDeviceCol = Array.FindIndex(vHeader, h => h.Equals("Device Name", StringComparison.OrdinalIgnoreCase));
                    int vTimestampCol = Array.FindIndex(vHeader, h => h.Equals("Local TimeStamp", StringComparison.OrdinalIgnoreCase));
                    int vEnergyCol = Array.FindIndex(vHeader, h =>
                        h.Equals("TotalDeliveredActiveEnergy (Wh)", StringComparison.OrdinalIgnoreCase) ||
                        h.Equals("Active energy (Wh)", StringComparison.OrdinalIgnoreCase) ||
                        h.Equals("Active energy delivered (Wh)", StringComparison.OrdinalIgnoreCase));

                    for (int i = 1; i < vAllLines.Length; i++)
                    {
                        try
                        {
                            string[] vParts = vAllLines[i].Split(',');

                            string vGatewayName = vGatewayCol >= 0 && vParts.Length > vGatewayCol ? vParts[vGatewayCol] : null;
                            string vDeviceName = vDeviceCol >= 0 && vParts.Length > vDeviceCol ? vParts[vDeviceCol] : null;

                            DateTime? vTimestamp = null;
                            if (vTimestampCol >= 0 && vParts.Length > vTimestampCol && DateTime.TryParse(vParts[vTimestampCol], out DateTime vTs))
                                vTimestamp = vTs;

                            decimal? vEnergy = null;
                            if (vEnergyCol >= 0 && vParts.Length > vEnergyCol && decimal.TryParse(vParts[vEnergyCol], NumberStyles.Any, CultureInfo.InvariantCulture, out decimal vVal))
                                vEnergy = vVal;

                            int vDeviceId = InsertOrGetDevice(oSqlConn, vGatewayName, vDeviceName);

                            using (SqlCommand oCmd = new SqlCommand(
                                "INSERT INTO ems.EnergyReadings (DeviceId, LocalTimestamp, ActiveDeliveredEnergy) VALUES (@DeviceId, @LocalTimestamp, @Energy)", oSqlConn))
                            {
                                oCmd.Parameters.AddWithValue("@DeviceId", (object)vDeviceId ?? DBNull.Value);
                                oCmd.Parameters.AddWithValue("@LocalTimestamp", (object)vTimestamp ?? DBNull.Value);
                                oCmd.Parameters.AddWithValue("@Energy", (object)vEnergy ?? DBNull.Value);
                                oCmd.ExecuteNonQuery();
                            }
                        }
                        catch (Exception oInnerEx)
                        {
                            File.AppendAllText(vLogFile, $"{DateTime.Now}: Error in line {i + 1}: {oInnerEx.Message}{Environment.NewLine}");
                        }
                    }
                }
            }
            catch (Exception oEx)
            {
                File.AppendAllText(vLogFile, $"{DateTime.Now}: {oEx.Message}{Environment.NewLine}");
            }
        }

        private static int InsertOrGetDevice(SqlConnection oSqlConn, string vGatewayName, string vDeviceName)
        {
            using (SqlCommand oCheckCmd = new SqlCommand(
                "SELECT DeviceId FROM ems.Device WHERE GatewayName = @GatewayName AND DeviceName = @DeviceName", oSqlConn))
            {
                oCheckCmd.Parameters.AddWithValue("@GatewayName", (object)vGatewayName ?? DBNull.Value);
                oCheckCmd.Parameters.AddWithValue("@DeviceName", (object)vDeviceName ?? DBNull.Value);

                object oResult = oCheckCmd.ExecuteScalar();
                if (oResult != null) return (int)oResult;
            }

            using (SqlCommand oInsertCmd = new SqlCommand(
                "INSERT INTO ems.Device (GatewayName, DeviceName) OUTPUT INSERTED.DeviceId VALUES (@GatewayName, @DeviceName)", oSqlConn))
            {
                oInsertCmd.Parameters.AddWithValue("@GatewayName", (object)vGatewayName ?? DBNull.Value);
                oInsertCmd.Parameters.AddWithValue("@DeviceName", (object)vDeviceName ?? DBNull.Value);
                return (int)oInsertCmd.ExecuteScalar();
            }
        }
    }
}