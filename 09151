using System;
using System.Configuration;
using System.Threading;

namespace Assembly3DCamera
{
    class Program
    {
        static void Main()
        {
            Console.WriteLine("DB to CSV + SQL Sync Started");

            while (true)
            {
                Console.WriteLine($"[{DateTime.UtcNow}] Checking databases...");

                try
                {
                    Data.db_to_csv();
                    Database.csv_to_sql();
                }
                catch (Exception ex)
                {
                    Logger.log_error("MainLoop", ex);
                }

                Console.WriteLine($"[{DateTime.UtcNow}] Cycle complete.\n");
                Thread.Sleep(TimeSpan.FromMinutes(5));
            }
        }
    }
}





using System;
using System.Configuration;
using System.Data.SQLite;
using System.IO;

namespace Assembly3DCamera
{
    class Data
    {
        public static void db_to_csv()
        {
            string dbFolder = ConfigurationManager.AppSettings["DbFolder"];
            string csvFolder = ConfigurationManager.AppSettings["CsvFolder"];
            string logFolder = ConfigurationManager.AppSettings["LogFolder"];

            Directory.CreateDirectory(csvFolder);
            Directory.CreateDirectory(logFolder);

            string dataLog = Path.Combine(logFolder, "data.txt");

            foreach (var dbFile in Directory.GetFiles(dbFolder, "*.db"))
            {
                try
                {
                    using (var conn = new SQLiteConnection($"Data Source={dbFile};Version=3;"))
                    {
                        conn.Open();

                        using (var cmd = conn.CreateCommand())
                        {
                            cmd.CommandText = "SELECT name FROM sqlite_master WHERE type='table' AND name NOT LIKE 'sqlite_%'";
                            using (var reader = cmd.ExecuteReader())
                            {
                                while (reader.Read())
                                {
                                    string table = reader.GetString(0);
                                    string csvPath = Path.Combine(csvFolder, $"{table}.csv");

                                    export_table(conn, table, csvPath, dataLog);
                                }
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    Logger.log_error($"DB:{dbFile}", ex);
                }
            }
        }

        private static void export_table(SQLiteConnection conn, string table, string csvPath, string dataLog)
        {
            try
            {
                using (var cmd = conn.CreateCommand())
                {
                    cmd.CommandText = $"SELECT * FROM {table}";
                    using (var reader = cmd.ExecuteReader())
                    {
                        using (var writer = new StreamWriter(csvPath, append: true))
                        {
                            int fieldCount = reader.FieldCount;

                            // write header if file empty
                            if (writer.BaseStream.Length == 0)
                            {
                                for (int i = 0; i < fieldCount; i++)
                                {
                                    if (i > 0) writer.Write(",");
                                    writer.Write(reader.GetName(i));
                                }
                                writer.WriteLine();
                            }

                            while (reader.Read())
                            {
                                string row = "";
                                for (int i = 0; i < fieldCount; i++)
                                {
                                    if (i > 0) row += ",";
                                    row += reader.GetValue(i).ToString();
                                }

                                // check duplicate
                                if (!Logger.is_duplicate(row))
                                {
                                    writer.WriteLine(row);
                                    Logger.update_data_log(dataLog, table);
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Logger.log_error($"Export:{table}", ex);
            }
        }
    }
}




using System;
using System.Configuration;
using System.Data;
using System.Data.SqlClient;
using System.Data.SQLite;
using System.IO;

namespace Assembly3DCamera
{
    class Database
    {
        public static void csv_to_sql()
        {
            string dbFolder = ConfigurationManager.AppSettings["DbFolder"];
            string connStr = ConfigurationManager.AppSettings["SqlConnectionString"];

            foreach (var dbFile in Directory.GetFiles(dbFolder, "*.db"))
            {
                try
                {
                    using (var conn = new SQLiteConnection($"Data Source={dbFile};Version=3;"))
                    {
                        conn.Open();

                        using (var cmd = conn.CreateCommand())
                        {
                            cmd.CommandText = "SELECT name FROM sqlite_master WHERE type='table' AND name NOT LIKE 'sqlite_%'";
                            using (var reader = cmd.ExecuteReader())
                            {
                                while (reader.Read())
                                {
                                    string table = reader.GetString(0);
                                    import_table(conn, table, connStr);
                                }
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    Logger.log_error($"SQLImport:{dbFile}", ex);
                }
            }
        }

        private static void import_table(SQLiteConnection conn, string table, string connStr)
        {
            try
            {
                using (var cmd = conn.CreateCommand())
                {
                    cmd.CommandText = $"SELECT * FROM {table}";
                    using (var reader = cmd.ExecuteReader())
                    {
                        DataTable dt = new DataTable();
                        dt.Load(reader);

                        using (var sqlConn = new SqlConnection(connStr))
                        {
                            sqlConn.Open();

                            // create table if not exists
                            string create = $"IF NOT EXISTS (SELECT * FROM sysobjects WHERE name='{table}' AND xtype='U') CREATE TABLE {table} (";
                            for (int i = 0; i < dt.Columns.Count; i++)
                            {
                                create += $"[{dt.Columns[i].ColumnName}] NVARCHAR(MAX)";
                                if (i < dt.Columns.Count - 1) create += ",";
                            }
                            create += ")";
                            using (var cmdCreate = new SqlCommand(create, sqlConn))
                            {
                                cmdCreate.ExecuteNonQuery();
                            }

                            // insert only new rows
                            foreach (DataRow row in dt.Rows)
                            {
                                string rowStr = string.Join(",", row.ItemArray);
                                if (!Logger.is_duplicate(rowStr))
                                {
                                    string cols = string.Join(",", dt.Columns.Cast<DataColumn>().Select(c => $"[{c.ColumnName}]"));
                                    string vals = string.Join(",", dt.Columns.Cast<DataColumn>().Select((c, i) => $"@p{i}"));

                                    string insert = $"INSERT INTO {table} ({cols}) VALUES ({vals})";
                                    using (var cmdInsert = new SqlCommand(insert, sqlConn))
                                    {
                                        for (int i = 0; i < dt.Columns.Count; i++)
                                            cmdInsert.Parameters.AddWithValue($"@p{i}", row[i]);
                                        cmdInsert.ExecuteNonQuery();
                                    }

                                    string dataLog = Path.Combine(ConfigurationManager.AppSettings["LogFolder"], "data.txt");
                                    Logger.update_data_log(dataLog, table);
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Logger.log_error($"Import:{table}", ex);
            }
        }
    }
}




using System;
using System.IO;

namespace Assembly3DCamera
{
    class Logger
    {
        private static readonly string logFolder = System.Configuration.ConfigurationManager.AppSettings["LogFolder"];
        private static readonly string exceptionsFile = Path.Combine(logFolder, "exceptions.txt");
        private static readonly string seenFile = Path.Combine(logFolder, "seen.txt");

        public static void log_error(string src, Exception ex)
        {
            Directory.CreateDirectory(logFolder);
            File.AppendAllText(exceptionsFile, $"[{DateTime.UtcNow}] {src}: {ex}\n");
        }

        public static bool is_duplicate(string row)
        {
            Directory.CreateDirectory(logFolder);
            if (!File.Exists(seenFile)) File.WriteAllText(seenFile, "");

            var lines = File.ReadAllLines(seenFile);
            foreach (var l in lines)
                if (l == row) return true;

            // append new row
            File.AppendAllText(seenFile, row + Environment.NewLine);
            return false;
        }

        public static void update_data_log(string file, string table)
        {
            Directory.CreateDirectory(logFolder);
            File.WriteAllText(file, $"[{DateTime.UtcNow}] New data in {table}\n");
        }
    }
}




using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;

namespace Assembly3DCamera
{
    public static class CsvCombiner
    {
        public static void CombineYesterdayByLot(string baseCsvPath)
        {
            DateTime yesterday = DateTime.Now.AddDays(-1);
            string folderPath = Path.Combine(
                baseCsvPath,
                yesterday.ToString("yyyy"),
                yesterday.ToString("MM"),
                yesterday.ToString("dd")
            );

            if (!Directory.Exists(folderPath))
            {
                Console.WriteLine($"[{DateTime.Now}] Yesterday folder not found: {folderPath}");
                return;
            }

            string outputFileName = yesterday.ToString("ddMMyyyy") + ".csv";
            string combinedFile = Path.Combine(folderPath, outputFileName);

            if (File.Exists(combinedFile))
            {
                Console.WriteLine($"[{DateTime.Now}] Combined file already exists: {combinedFile}");
                return;
            }

            var csvFiles = Directory.GetFiles(folderPath, "*.csv")
                                    .Where(f => !f.EndsWith(outputFileName))
                                    .ToList();

            if (csvFiles.Count == 0)
            {
                Console.WriteLine($"[{DateTime.Now}] No CSV files to combine in {folderPath}");
                return;
            }

            List<string> headers = null;
            var rows = new List<string[]>();

            foreach (var file in csvFiles)
            {
                var lines = File.ReadAllLines(file);
                if (lines.Length == 0) continue;

                var fileHeaders = lines[0].Split(',');
                if (headers == null)
                {
                    headers = fileHeaders.ToList();
                }

                for (int i = 1; i < lines.Length; i++)
                {
                    if (string.IsNullOrWhiteSpace(lines[i])) continue;
                    rows.Add(lines[i].Split(','));
                }
            }

            if (headers == null || rows.Count == 0)
            {
                Console.WriteLine($"[{DateTime.Now}] No valid rows found in {folderPath}");
                return;
            }

            int lotIndex = headers.IndexOf("LOT");
            if (lotIndex == -1)
            {
                Console.WriteLine($"[{DateTime.Now}] LOT column not found, cannot combine.");
                return;
            }

            var sortedRows = rows.OrderBy(r => r[lotIndex]).ToList();

            using (var writer = new StreamWriter(combinedFile))
            {
                writer.WriteLine(string.Join(",", headers));
                foreach (var row in sortedRows)
                {
                    writer.WriteLine(string.Join(",", row));
                }
            }

            Console.WriteLine($"[{DateTime.Now}] Combined CSV created: {combinedFile}");

            // ✅ Delete all original split CSV files after combine
            foreach (var file in csvFiles)
            {
                try
                {
                    File.Delete(file);
                    Console.WriteLine($"[{DateTime.Now}] Deleted file: {file}");
                }
                catch (Exception exDel)
                {
                    Console.WriteLine($"[{DateTime.Now}] Could not delete {file}: {exDel.Message}");
                }
            }
        }
    }
}