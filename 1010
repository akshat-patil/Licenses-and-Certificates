private void ApplyBusinessRules(int sid)
{
    try
    {
        using (SqlConnection con = new SqlConnection(ConfigurationManager.ConnectionStrings["SiteSqlServer"].ToString()))
        {
            con.Open();

            // 1️⃣ Calculate total ScrapQtyStockValue
            decimal totalValue = 0;
            string sqlTotal = "SELECT SUM(ScrapQtyStockValue) FROM tblScrapNoteTrans WHERE sid = @sid";
            using (SqlCommand cmdTotal = new SqlCommand(sqlTotal, con))
            {
                cmdTotal.Parameters.AddWithValue("@sid", sid);
                object result = cmdTotal.ExecuteScalar();
                if (result != DBNull.Value && result != null)
                    totalValue = Convert.ToDecimal(result);
            }

            // 2️⃣ Decide next status based on total value
            int nextStatus = 0;
            string nextStatusText = "";

            if (totalValue <= 1000)
            {
                // BA/BU → Env → Warehouse
                nextStatus = 6; 
                nextStatusText = "Pending at BA/BU";
            }
            else if (totalValue > 1000 && totalValue <= 5000)
            {
                // Warehouse → BA/BU → Env → Warehouse
                nextStatus = 5;
                nextStatusText = "Pending at Warehouse";
            }
            else if (totalValue > 5000 && totalValue <= 20000)
            {
                // Controlling → Taxation → COO → CFO → Warehouse → BA/BU → Warehouse
                nextStatus = 1;
                nextStatusText = "Pending at Controlling";
            }
            else if (totalValue > 20000 && totalValue <= 50000)
            {
                // Controlling → Taxation → COO → CFO → Warehouse → BA/BU → BG/CFO → Warehouse
                nextStatus = 1;
                nextStatusText = "Pending at Controlling";
            }
            else if (totalValue > 50000)
            {
                // Full flow: Controlling → Taxation → COO → CFO → Warehouse → BA/BU → BG/CFO → BG/CEO → Env → Warehouse
                nextStatus = 1;
                nextStatusText = "Pending at Controlling";
            }

            // 3️⃣ Update ScrapNote with first step
            string sqlUpdate = "UPDATE tblScrapNote SET status = @status, statusText = @statusText WHERE sid = @sid";
            using (SqlCommand cmdUpdate = new SqlCommand(sqlUpdate, con))
            {
                cmdUpdate.Parameters.AddWithValue("@status", nextStatus);
                cmdUpdate.Parameters.AddWithValue("@statusText", nextStatusText);
                cmdUpdate.Parameters.AddWithValue("@sid", sid);
                cmdUpdate.ExecuteNonQuery();
            }

            // 4️⃣ Insert first flow entry
            string sqlInsert = @"INSERT INTO tblFlow (sid, addedBy, status, statusText, csComment)
                                 VALUES (@sid, @addedBy, @status, @statusText, @comment)";
            using (SqlCommand cmdInsert = new SqlCommand(sqlInsert, con))
            {
                cmdInsert.Parameters.AddWithValue("@sid", sid);
                cmdInsert.Parameters.AddWithValue("@addedBy", Session["uid"].ToString());
                cmdInsert.Parameters.AddWithValue("@status", nextStatus);
                cmdInsert.Parameters.AddWithValue("@statusText", nextStatusText);
                cmdInsert.Parameters.AddWithValue("@comment", "Scrap Note submitted by CS (Value = " + totalValue + ")");
                cmdInsert.ExecuteNonQuery();
            }
        }
    }
    catch (Exception ex)
    {
        lblMessage.ForeColor = System.Drawing.Color.Red;
        lblMessage.Text = "Error applying business rules: " + ex.Message;
    }
}









// Get the latest Scrap Note ID created by this user
int sid = 0;
using (SqlCommand cmdId = new SqlCommand("SELECT TOP 1 sid FROM tblScrapNote WHERE addedBy = @addedBy ORDER BY sid DESC", oSqlConnection))
{
    cmdId.Parameters.AddWithValue("@addedBy", Session["uid"].ToString());
    sid = Convert.ToInt32(cmdId.ExecuteScalar());
}

// Apply business rules for this Scrap Note
ApplyBusinessRules(sid);