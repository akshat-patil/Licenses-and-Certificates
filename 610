using Microsoft.AspNetCore.Hosting;
using Microsoft.Extensions.Hosting;
using Syncfusion.Licensing;

namespace PdfToExcelApp
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Register Syncfusion license
            SyncfusionLicenseProvider.RegisterLicense("YOUR_LICENSE_KEY_HERE");
            CreateHostBuilder(args).Build().Run();
        }

        public static IHostBuilder CreateHostBuilder(string[] args) =>
            Host.CreateDefaultBuilder(args)
                .ConfigureWebHostDefaults(webBuilder =>
                {
                    webBuilder.UseStartup<Startup>();
                });
    }
}





using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;

namespace PdfToExcelApp
{
    public class Startup
    {
        public void ConfigureServices(IServiceCollection services)
        {
            services.AddControllersWithViews();
        }

        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
        {
            if (env.IsDevelopment())
                app.UseDeveloperExceptionPage();

            app.UseStaticFiles();
            app.UseRouting();
            app.UseEndpoints(endpoints =>
            {
                endpoints.MapControllerRoute(
                    name: "default",
                    pattern: "{controller=Pdf}/{action=Index}/{id?}");
            });
        }
    }
}





namespace PdfToExcelApp.Models
{
    public class PdfDataModel
    {
        public string? ExtractedText { get; set; }
    }
}





using Microsoft.AspNetCore.Mvc;
using System.IO;
using Syncfusion.XlsIO;
using System.Threading.Tasks;

namespace PdfToExcelApp.Controllers
{
    public class PdfController : Controller
    {
        [HttpGet]
        public IActionResult Index()
        {
            return View();
        }

        [HttpPost]
        public async Task<IActionResult> Index(IFormFile pdfFile)
        {
            if (pdfFile == null || pdfFile.Length == 0)
            {
                ViewBag.Message = "Please upload a valid PDF file.";
                return View();
            }

            string extractedText = string.Empty;

            using (var stream = new MemoryStream())
            {
                await pdfFile.CopyToAsync(stream);
                stream.Position = 0;

                // âœ… Fully qualified class names to avoid conflicts
                var loadedDocument = new Syncfusion.Pdf.Parsing.PdfLoadedDocument(stream);
                var ocrProcessor = new Syncfusion.OCRProcessor.OCRProcessor();

                // Optional: specify Tesseract OCR language data folder if you have it
                // ocrProcessor.Settings.TesseractLanguage = "eng";
                // ocrProcessor.Settings.LanguageDataPath = @"C:\tessdata\";

                var result = ocrProcessor.PerformOCR(loadedDocument);
                extractedText = result.Text;
                loadedDocument.Close(true);
            }

            // âœ… Create Excel file
            using (var excelEngine = new Syncfusion.XlsIO.ExcelEngine())
            {
                var app = excelEngine.Excel;
                var workbook = app.Workbooks.Create(1);
                var sheet = workbook.Worksheets[0];
                sheet.Range["A1"].Text = "Extracted Text";
                sheet.Range["A2"].Text = extractedText;

                using (var excelStream = new MemoryStream())
                {
                    workbook.SaveAs(excelStream);
                    workbook.Close();
                    excelStream.Position = 0;

                    string fileName = "ExtractedData.xlsx";
                    return File(excelStream.ToArray(), 
                        "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                        fileName);
                }
            }
        }
    }
}




@{
    ViewBag.Title = "PDF to Excel OCR";
}

<h2>PDF to Excel OCR Converter</h2>

<form asp-action="Index" method="post" enctype="multipart/form-data">
    <div>
        <label>Select PDF File:</label>
        <input type="file" name="pdfFile" accept=".pdf" required />
    </div>
    <br />
    <button type="submit" class="btn btn-primary">Process PDF</button>
</form>

@if (ViewBag.Message != null)
{
    <p style="color:red">@ViewBag.Message</p>
}







{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft": "Warning",
      "Microsoft.Hosting.Lifetime": "Information"
    }
  },
  "AllowedHosts": "*"
}







using Microsoft.AspNetCore.Mvc;
using System.IO;
using Syncfusion.XlsIO;
using System.Threading.Tasks;

// ðŸ‘‡ Add aliases to fix class conflicts
using PdfDoc = Syncfusion.Pdf.Parsing;
using OcrLib = Syncfusion.OCRProcessor;

namespace PdfToExcelApp.Controllers
{
    public class PdfController : Controller
    {
        [HttpGet]
        public IActionResult Index()
        {
            return View();
        }

        [HttpPost]
        public async Task<IActionResult> Index(IFormFile pdfFile)
        {
            if (pdfFile == null || pdfFile.Length == 0)
            {
                ViewBag.Message = "Please upload a valid PDF file.";
                return View();
            }

            string extractedText = string.Empty;

            using (var stream = new MemoryStream())
            {
                await pdfFile.CopyToAsync(stream);
                stream.Position = 0;

                // âœ… Using aliases to avoid ambiguity
                var loadedDocument = new PdfDoc.PdfLoadedDocument(stream);
                var ocrProcessor = new OcrLib.OCRProcessor();

                // Perform OCR
                var result = ocrProcessor.PerformOCR(loadedDocument);
                extractedText = result.Text;
                loadedDocument.Close(true);
            }

            // âœ… Save results into Excel
            using (var excelEngine = new Syncfusion.XlsIO.ExcelEngine())
            {
                var app = excelEngine.Excel;
                var workbook = app.Workbooks.Create(1);
                var sheet = workbook.Worksheets[0];
                sheet.Range["A1"].Text = "Extracted Text";
                sheet.Range["A2"].Text = extractedText;

                using (var excelStream = new MemoryStream())
                {
                    workbook.SaveAs(excelStream);
                    workbook.Close();
                    excelStream.Position = 0;

                    string fileName = "ExtractedData.xlsx";
                    return File(excelStream.ToArray(),
                        "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                        fileName);
                }
            }
        }
    }
}